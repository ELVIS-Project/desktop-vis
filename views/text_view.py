#!/usr/bin/env python
# -*- coding: utf-8 -*-
#--------------------------------------------------------------------------------------------------
# Program Name:           vis
# Program Description:    Helps analyze music with computers.
#
# Filename:               views/text_view.py
# Purpose:                Dialogue window to display text files.
#
# Copyright (C) 2013 Christopher Antila
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#--------------------------------------------------------------------------------------------------
"""
Dialogue window to text files. Originally intended for CSV files generated by pandas.
"""

from shutil import copyfile
from vis.views.Ui_text_display import Ui_Text_Display
from PyQt4.QtGui import QDialog, QFileDialog, QMessageBox, QInputDialog, QLineEdit
from PyQt4.QtCore import QUrl


class VisTextView(object):
    """
    Display a text file. The class was designed for an HTML-format table as outputted by
    :meth:`pandas.DataFrame.to_html`.
    """
    def __init__(self):
        self.dialog = QDialog()
        self._gui = Ui_Text_Display()
        self._gui.setupUi(self.dialog)
        self._pathname = None  # the unicode pathname of the pandas-given table
        self._custom_html = u'views/custom_table.html'  # add this to the pandas-given table
        self._display = None  # the resulting QString that actually gets displayed
        self._trigger_return = None

    def trigger(self, pathname):
        """
        Set up the window and display the HTML-format table loaded from the indicated path.

        :param pathname: The pathname of the table to display.
        :type pathname: basestring
        """
        # save the pathname
        self._pathname = unicode(pathname)

        # add our custom formatting to the file
        self._custom_formatting()

        # set which text to show
        self._gui.webview.setHtml(self._display)

        # UI setup stuff
        self.dialog.show()
        self._gui.webview.show()

        # Setup signals
        for btn in self._gui.buttonBox.buttons():
            if btn.text() == 'Save':
                btn.clicked.connect(self.save_button)

        # Show the form
        self.dialog.exec_()

        # if applicable, return the instructions for what to save and where
        if self._trigger_return is not None:
            return self._trigger_return

    def _custom_formatting(self):
        """
        Add the custom table formatting, as found in self._custom_html, to the table data given to
        us by whoever called us.
        """
        replace_this = u'<!-- pandas table goes here -->'
        # read our HTML template
        template_file = open(self._custom_html, 'r')
        template_str = template_file.read()
        template_file.close()
        # read the pandas-produced table
        table_file = open(self._pathname, 'r')
        table_str = table_file.read()
        table_file.close()
        # replace the "replace me" comment
        self._display = template_str.replace(replace_this, table_str)

    def save_button(self):
        """
        Copy the file from its current path to a new one, effectively "saving" it for the user.
        """
        poss_formats = ['csv', 'html', 'excel']
        out_form = QInputDialog.getText(\
            None,
            u'Choose Output Format',
            u'Choose your output format: csv, html, excel',
            QLineEdit.Normal,
            u'csv')
        # if they didn't choose "cancel," deal with the output format
        if out_form[1] is True:
            out_form = unicode(out_form[0]).lower()
            if out_form not in poss_formats:
                out_formt = poss_formats[0]  # default to CSV
            # deal with the pathname
            new_path = unicode(QFileDialog.getSaveFileName(\
                None,
                u'Choose a File Name',
                u'',
                u'',
                None))
            if new_path != u'':
                if 'html' == out_form:
                    # we have the HTML, so we can save it
                    if u'.html' != new_path[-5:] and u'.htm' != new_path[-4:]:
                        new_path += u'.html'
                    try:
                        html_file = open(new_path, 'w')
                        html_file.write(self._display)
                        html_file.close()
                    except IOError as ioe:
                        QMessageBox.warning(None,
                            u'Error While Saving Text',
                            u'Received an error saving text:\n\n' + unicode(ioe),
                            QMessageBox.StandardButtons(\
                                QMessageBox.Ok),
                            QMessageBox.Ok)
                # we don't have the CSV or Excel, so we have to ask the caller to do it for us
                elif 'csv' == out_form:
                    self._trigger_return = (u'CSV', new_path)
                elif 'excel' == out_form:
                    self._trigger_return = (u'Excel', new_path)
