#!/usr/bin/env python
# -*- coding: utf-8 -*-
#--------------------------------------------------------------------------------------------------
# Program Name:           vis
# Program Description:    Helps analyze music with computers.
#
# Filename:               views/text_view.py
# Purpose:                Dialogue window to display text files.
#
# Copyright (C) 2013 Christopher Antila
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#--------------------------------------------------------------------------------------------------
"""
Dialogue window to text files. Originally intended for CSV files generated by pandas.
"""

from shutil import copyfile
from vis.views.Ui_text_display import Ui_Text_Display
from PyQt4.QtGui import QDialog, QFileDialog, QMessageBox, QInputDialog, QLineEdit
from PyQt4.QtCore import QUrl


class VisTextView(object):
    """
    Display a text file. The class was designed for an HTML-format table as outputted by
    :meth:`pandas.DataFrame.to_html`.
    """
    def __init__(self):
        self.dialog = QDialog()
        self._gui = Ui_Text_Display()
        self._gui.setupUi(self.dialog)
        self._pathname = None  # the unicode pathname of the pandas-given table
        self._custom_html = u'views/custom_table.html'  # add this to the pandas-given table
        self._display = None  # the resulting QString that actually gets displayed
        self._trigger_return = []

    def trigger(self, pathname):
        """
        Set up the window and display the HTML-format table loaded from the indicated path. The
        return value tells you whether the user requested CSV- or Excel-format output, and the
        pathname for which they requested it. HTML-format is handled internally.

        :param pathname: The pathname of the table to display.
        :type pathname: basestring
        :returns: A list of 2-tuples telling which type of output to save and where to save it.
        :rtype: list of (```basestring```, ```basestring```)

        Example return:

        >>> textview.trigger()
        [('CSV', '/home/christopher/results.csv'), \
         ('CSV', '/home/christopher/to_send/results.csv'), \
         ('Excel', '/home/christopher/results.xlsx')]
        """
        # save the pathname
        self._pathname = unicode(pathname)

        # add our custom formatting to the file
        self._custom_formatting()

        # set which text to show
        self._gui.webview.setHtml(self._display)

        # UI setup stuff
        self.dialog.show()
        self._gui.webview.show()

        # Setup signals (dialog close is done automatically)
        self._gui.btn_csv.clicked.connect(self._save_csv)
        self._gui.btn_html.clicked.connect(self._save_html)
        self._gui.btn_excel.clicked.connect(self._save_excel)

        # Show the form
        self.dialog.exec_()

        # if applicable, return the instructions for what to save and where
        if len(self._trigger_return) > 0:
            return self._trigger_return

    def _custom_formatting(self):
        """
        Add the custom table formatting, as found in self._custom_html, to the table data given to
        us by whoever called us.
        """
        replace_this = u'<!-- pandas table goes here -->'
        # read our HTML template
        template_file = open(self._custom_html, 'r')
        template_str = template_file.read()
        template_file.close()
        # read the pandas-produced table
        table_file = open(self._pathname, 'r')
        table_str = table_file.read()
        table_file.close()
        # replace the "replace me" comment
        self._display = template_str.replace(replace_this, table_str)
        # replace the old table header with a better one (i.e., put in column names)
        old_header = """<thead>
    <tr style="text-align: right;">
      <th></th>
      <th>data</th>"""
        new_header = """<thead>
    <tr style="text-align: right;">
      <th>Object</th>
      <th>Frequency</th>"""
        self._display = self._display.replace(old_header, new_header)

    def _save_csv(self):
        self._save_button('csv')

    def _save_html(self):
        self._save_button('html')

    def _save_excel(self):
        self._save_button('excel')

    def _save_button(self, format):
        """
        Copy the file from its current path to a new one, effectively "saving" it for the user.

        :param format: The format to save (csv, html, excel).
        :type format: ```basestring```
        """
        poss_formats = ['csv', 'html', 'excel']
        if format not in poss_formats:
            format = poss_formats[0]  # default to CSV
        # deal with the pathname
        new_path = unicode(QFileDialog.getSaveFileName(\
            None,
            u'Choose a File Name',
            u'',
            u'',
            None))
        if new_path != u'':
            if 'html' == format:
                # we have the HTML, so we can save it
                if u'.html' != new_path[-5:] and u'.htm' != new_path[-4:]:
                    new_path += u'.html'
                try:
                    html_file = open(new_path, 'w')
                    html_file.write(self._display)
                    html_file.close()
                except IOError as ioe:
                    QMessageBox.warning(None,
                        u'Error While Saving Text',
                        u'Received an error saving text:\n\n' + unicode(ioe),
                        QMessageBox.StandardButtons(\
                            QMessageBox.Ok),
                        QMessageBox.Ok)
            # we don't have the CSV or Excel, so we have to ask the caller to do it for us
            elif 'csv' == format:
                self._trigger_return.append((u'CSV', new_path))
            elif 'excel' == format:
                self._trigger_return.append((u'Excel', new_path))
