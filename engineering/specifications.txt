specifications.txt :
    Technical specifications for how we will meet our high-level objectives.


Implementation Specifications:
==============================
Imaginary User 1, the Musician|Programmer (MP) works at this level.

Versions:
- vis1 through vis8:
    - previous versions
- vis9, vis9a, vis9b, vis9c, vis-stable, vis9d:
    - vis9x are current versions; 9c is the most recent tagged version (it's a fixed-in-time label)
    - bugs are fixed in the vis-stable branch, but no new features are added (it's an auto-updating label)
    - vis9d will be tagged as we release visX, so 9d will be the most tested version at that point
- visX:
    - would be vis10, but we'll use "X" instead, as per Catherine's suggestion
    - will use the Web/VisTrails architecture we envision for the end of the grant
    - will acquire letter (visXa, visXb, etc.) as we add features and fix bugs
- vis11, vis12, etc.
    - the distant future!

Targeted Libraries:
- python 2.7.5
    This is the most recent version of our primary programming language, which we chose because of the availability of music21.
- music21 1.6.0
    This library ("software toolkit") was developed by team member Myke Cuthbert, and contains representations of and operations on a variety of musical objects. Version 1.6.0 is not yet released, but it has features and bug-fixes we require.
- pandas 0.12.0
    This library provides fast data structures that are compatible with music21's ubiquitous "Stream" objects and more flexible for scientific and statistical operations (especially through R). We will introduce pandas with visX. Also the optional dependency libraries:
    - numexpr
    - bottleneck
- django 1.5.1 (object-relational mapper)
    This library provides an easy and power way to connect to relational databases. This will be useful for our internal query processes, and for the future situation where we will store analysis results on a Web server.
- R 3.0.1
    Supplementary programming language for statistics and visualizations.
    - Rpy 2.3.6
    Transforms our python-language data objects into R-language data objects.
    - ggplot2 0.9.3.1
- Abjad 2.12
    Python library to help with output to LilyPond.
- PyQt4
    Mostly a GUI library. Prior to visX, all our graphical interfaces have used PyQt. Since VisTrails also uses PyQt, we may write our own PyQt code for minor tasks, like displaying the offset-selection window.
- mock 1.0.1
    A library for unit testing, to create mock objects and patch dependencies.
- VisTrails 2.0 API
    http://www.vistrails.org/usersguide/v2.0/html/batch.html#finding-methods-via-the-command-line
- Haskell 2010
    Supplementary programming language for exploratory research purposes. Uses a "functional" paradigm, allowing greater efficiency in many types of computationally-intensive questions. Likely to show up in the developers' own research, but not in functionality we will announce in October.

Two Data Models:
- IndexedPiece:
    Stores, formats, and prepares data about a single piece.
- AggregatedPieces:
    Stores, formats, and prepares data about more than one IndexedPiece.

Two Types of Analyzers:
- Indexer:
    For things that make sense to imagine as starting at the beginning and ending at the end of a piece, like "notes" or "chords." You might describe these as "observed" features.
- Experimenter:
    For things that correspond to a piece, but not a particular moment in it, like "number of notes" and "contrapuntal entropy." You might describe these as "extracted" features.

Two Controllers:
- WController (for VisTrails workflows):
    The model-view-adapter adapter component for the Web interface
- MPController (for multiprocessing):
    Easier way to coordinate and optimize our use of multiprocessing for any computationally-intense tasks.
    - must be accessible to all modules
    - shall be used whenever possible, for any computation
    - communication between MPController and client modules through Pipe
    - avoids the problem of making multiple Pool objects, resulting in a total of more processes than CPUs/cores available in the computer
    - avoids overhead of thinking how to use a Pool, and whether to use multiprocessing; just do it

Documentation Needs:
- "Extend vis on VisTrails"
    - how to write a module that has parts of vis in it
- vis API:
    - IndexedPiece
    - AggregatedPieces
    - WController
    - MPController
- vis Extensibility API:
    - Indexer
    - Experimenter


Interface Specifications: VisTrails
===================================
Imaginary User 2, Tenured Musicologist (TM) will work at this level.

Targeted Software:
- VisTrails 2.0.2
- Deducer (an R package)

Documentation Needs:
- "vis on VisTrails"
    - How to design a workflow.
    - Description of all existing modules.
    - Descriptive samples, probably of our 10 trial queries.
    - How to add third-party modules.


Interface Specifications: HTML5
===============================
Imaginary User 3, Pre-Tenure Musicologist (PTM) will work at this level. It's a desktop web application, not meant for mobile devices.

Targeted Software:
- Firefox 23
- Chrome 29
- Internet Explorer 6

Targeted Libraries:
- Django 1.5.1
    Fun, fast, and easy library for writing web apps. Already being used for RODAN and the new ELVIS website.
- The database

Documentation Needs:
- "Think Computationally with vis"
    Some demonstrations of how to answer a musical question by using vis. We should consider using demonstration videos to supplement the text-based version of this document.
- "Use the vis Web App"
    Basic user guide.
